package com.example.demo.service;

import com.example.demo.dto.ResponseNotificationEvent;
import com.example.demo.dto.UserRegistrationEvent;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.extern.slf4j.Slf4j;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.mail.MailException;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

@Service
@Slf4j
public class EmailService {

    private static final Logger logger = LoggerFactory.getLogger(EmailService.class);

    private final JavaMailSender mailSender;
    private final ObjectMapper objectMapper;

    @Autowired
    public EmailService(JavaMailSender mailSender, ObjectMapper objectMapper) {
        this.mailSender = mailSender;
        this.objectMapper = objectMapper;
    }

    @KafkaListener(topics = "user-change-event", groupId = "email-change-group")
    public void changeEmail(String message) {
        try {
            // –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è JSON –≤ DTO
            UserRegistrationEvent event = objectMapper.readValue(message, UserRegistrationEvent.class);

            // –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è (–æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
            sendConfirmationChangeEmail(event.getLogin(), event.getToken());

        } catch (Exception e) {
            logger.error("An error occurred", e);
        }
    }


    @KafkaListener(topics = "user-registration", groupId = "registration-group")
    public void listenRegistration(String message) {
        try {
            // –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è JSON –≤ DTO
            UserRegistrationEvent event = objectMapper.readValue(message, UserRegistrationEvent.class);

            // –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è (–æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
            sendVerificationEmail(event.getLogin(), event.getToken());

        } catch (Exception e) {
            logger.error("An error occurred", e);
        }
    }

    @KafkaListener(topics = "user-forgot-event", groupId = "user-forgot-event")
    public void listenForgotEmail(String message) {
        try {
            // –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è JSON –≤ DTO
            UserRegistrationEvent event = objectMapper.readValue(message, UserRegistrationEvent.class);

            // –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è (–æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
            sendForgotEmail(event.getLogin(), event.getToken());

        } catch (Exception e) {
            logger.error("An error occurred", e);
        }
    }


    @KafkaListener(topics = "response-notifications", groupId = "response-notifications")
    public void listenAddResponse(String message) {
        try {
            // –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è JSON –≤ DTO
            ResponseNotificationEvent event = objectMapper.readValue(message, ResponseNotificationEvent.class);

            log.info("–°–æ–±—ã—Ç–∏–µ –ø—Ä–∏—à–ª–æ");

            // –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è (–æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
            sendMsgAboutResponse(event.getUsername(), event.getResponse(), event.getEmail());

        } catch (Exception e) {
            logger.error("An error occurred", e);
        }
    }



    @Async
    public void sendConfirmationChangeEmail(String to, String token) {
        String subject = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è ";
        String confirmationUrl = "http://localhost/api/auth/confirm-email-change?token=" + token;
        String message = "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ–Ω—ã email: " + confirmationUrl;

        SimpleMailMessage email = new SimpleMailMessage();
        email.setTo(to);
        email.setSubject(subject);
        email.setText(message);

        mailSender.send(email);
    }

    @Async
    public void sendVerificationEmail(String to, String token) {
        String subject = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email";
        String confirmationUrl = "http://localhost:3000/auth/confirm?token=" + token;

        String textContent = """
    –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!
    
    –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–≥–æ email –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:
    %s
    
    –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.
    
    –ï—Å–ª–∏ –≤—ã –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
    """.formatted(confirmationUrl);

        SimpleMailMessage email = new SimpleMailMessage();
        email.setTo(to);
        email.setSubject(subject);
        email.setText(textContent);

        try {
            mailSender.send(email);
        } catch (MailException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º email", e);
        }
    }

    @Async
    public void sendForgotEmail(String to, String token) {
        String subject = "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è";
        String resetUrl = "http://localhost:3000/auth/reset-password?token=" + token;

        String textContent = """
        –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!
        
        –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:
        %s
        
        –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.
        
        –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
        """.formatted(resetUrl);

        SimpleMailMessage email = new SimpleMailMessage();
        email.setTo(to);
        email.setSubject(subject);
        email.setText(textContent);

        try {
            mailSender.send(email);
        } catch (MailException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è", e);
        }
    }

    @Async
    public void sendMsgAboutResponse(String username, String responseName, String to) {
        String subject = "–ù–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é " + responseName;
        String message = String.format(
                "–£–≤–∞–∂–∞–µ–º—ã–π —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å,\n" +
                        "–ù–∞ –≤–∞—à—É –≤–∞–∫–∞–Ω—Å–∏—é ¬´%s¬ª –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –Ω–æ–≤—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç.\n\n" +
                        "–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤—è–∑–∏:\n" +
                        "üìß Email: %s\n\n" +
                        "–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ.",
                responseName, username
        );

        SimpleMailMessage email = new SimpleMailMessage();
        email.setTo(to);
        email.setSubject(subject);
        email.setText(message);

        mailSender.send(email);
    }
}
