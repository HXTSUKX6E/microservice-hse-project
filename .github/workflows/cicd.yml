name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
    - name: Verify Docker Compose
      run: docker-compose --version

  databases:
    runs-on: ubuntu-latest
    needs: setup
    services:
      auth-db:
        image: postgres:latest
        env:
          POSTGRES_DB: AuthDb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 12345678
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready -U postgres" --health-interval=5s --health-timeout=5s --health-retries=5
      
      company-vacancy-db:
        image: postgres:latest
        env:
          POSTGRES_DB: CompVacDb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 12345678
        ports:
          - 5433:5432
        options: --health-cmd="pg_isready -U postgres" --health-interval=5s --health-timeout=5s --health-retries=5
      
      pgadmin:
        image: dpage/pgadmin4
        env:
          PGADMIN_DEFAULT_EMAIL: admin@admin.com
          PGADMIN_DEFAULT_PASSWORD: admin
        ports:
          - 5051:80
    steps:
    - name: Wait for databases to be ready
      run: |
        echo "Waiting for databases to become healthy..."
        sleep 10

  auth-service:
    runs-on: ubuntu-latest
    needs: [setup, databases]
    steps:
    - uses: actions/checkout@v4
    - name: Build auth-service
      run: |
        cd auth-service/demo
        mvn clean package
    - name: Run tests for auth-service
      run: |
        cd auth-service/demo
        mvn test

  company-vacancy-service:
    runs-on: ubuntu-latest
    needs: [setup, databases]
    steps:
    - uses: actions/checkout@v4
    - name: Build company-vacancy-service
      run: |
        cd company-vacancy-service/demo
        mvn clean package
    - name: Run tests for company-vacancy-service
      run: |
        cd company-vacancy-service/demo
        mvn test

  cleanup:
    runs-on: ubuntu-latest
    needs: [auth-service, company-vacancy-service]
    if: always()
    steps:
    - name: Stop and remove services
      run: |
        docker-compose down || true