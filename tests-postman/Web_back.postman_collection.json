{
	"info": {
		"_postman_id": "e4a5d354-119e-45d1-87d1-2acc9e6577a1",
		"name": "Web_back",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "35146279"
	},
	"item": [
		{
			"name": "resume",
			"item": [
				{
					"name": "resume",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiI1MiIsInJvbGVfaWQiOjIsImlhdCI6MTczODU3NjI1NSwiZXhwIjoxNzM5MTgxMDU1fQ.ypYfbyouY_S1YNMmBMAGe5c7qXE6IeKy6UO2PRp0BL8phsFZ6eyM2nP48xuGtzfo",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"education\": \"52\",\r\n    \"skills\": \"52\",\r\n    \"birthday\": \"2003-13-06\",\r\n    \"full_name\": \"52\",\r\n    \"contact\": \"52\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/resume",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"resume"
							]
						}
					},
					"response": []
				},
				{
					"name": "resume/id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/resume/4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"resume",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "resume",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiI1MiIsInJvbGVfaWQiOjIsImlhdCI6MTczODU3NjI1NSwiZXhwIjoxNzM5MTgxMDU1fQ.ypYfbyouY_S1YNMmBMAGe5c7qXE6IeKy6UO2PRp0BL8phsFZ6eyM2nP48xuGtzfo",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"education\": \"52\",\r\n    \"skills\": \"52\",\r\n    \"birthday\": \"2004-01-06\",\r\n    \"gender\": \"female\",\r\n    \"full_name\": \"52\",\r\n    \"contact\": \"52\",\r\n    \"description\": \"ww\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/resume/4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"resume",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "resume",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiIyNSIsInJvbGVfaWQiOjEsImlhdCI6MTczODU4MzcyOCwiZXhwIjoxNzM5MTg4NTI4fQ.IFV9_k2-W3TTyGmHn_R8TD6SIpB4xmaTZnYmyFycACA8VdIqJJv1znrxbQfS_efS",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/admin/resume/11",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"admin",
								"resume",
								"11"
							]
						}
					},
					"response": []
				},
				{
					"name": "resume by admin",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiJkaW1hMjAwMzA2MTdAbWFpbC5ydSIsInJvbGVfaWQiOjIsImlhdCI6MTczODgzODI0MiwiZXhwIjoxNzM5NDQzMDQyfQ.6XhRAJp_00HXsU3icOPLjFg0dgygpEYGG6ouDdync9de8bAeM2zVe-078WxM9fHn",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/resume/del/13",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"resume",
								"del",
								"13"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "register user",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "fb8bbaea-5839-4473-94bf-a3722766f366",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"login\": \"512\",\r\n    \"password\": \"2003\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/auth/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "login user",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "profile user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.text()) {\r",
									"    const status = pm.response.code;\r",
									"    let jsonData;\r",
									"\r",
									"    try {\r",
									"        jsonData = pm.response.json();\r",
									"    } catch (e) {\r",
									"        pm.test(\"Ответ должен быть JSON\", () => {\r",
									"            pm.expect(false, \"Сервер вернул не JSON\").to.be.true;\r",
									"        });\r",
									"        return;\r",
									"    }\r",
									"    const tests = {\r",
									"        200: () => {\r",
									"            pm.test(\"Статус-код 200 (успешный запрос)\", () => pm.expect(status).to.equal(200));\r",
									"            pm.test(\"Ответ содержит ожидаемые данные\", () => {\r",
									"                pm.expect(jsonData).to.be.an(\"object\");\r",
									"            });\r",
									"        },\r",
									"        400: () => {\r",
									"            pm.test(\"Статус-код 400 (некорректный запрос)\", () => pm.expect(status).to.equal(400));\r",
									"            pm.test(\"Ответ содержит сообщение об ошибке\", () => {\r",
									"                pm.expect(jsonData).to.have.property(\"success\");\r",
									"            });\r",
									"        },\r",
									"        401: () => {\r",
									"            pm.test(\"Статус-код 401 (неавторизован)\", () => pm.expect(status).to.equal(401));\r",
									"            pm.test(\"Ответ сообщает о необходимости авторизации\", () => {\r",
									"                pm.expect(jsonData).to.have.property(\"success\");\r",
									"            });\r",
									"        },\r",
									"        404: () => {\r",
									"            pm.test(\"Статус-код 404 (ресурс не найден)\", () => pm.expect(status).to.equal(404));\r",
									"            pm.test(\"Ответ сообщает, что ресурс отсутствует\", () => {\r",
									"                pm.expect(jsonData).to.have.property(\"error\");\r",
									"            });\r",
									"        },\r",
									"        500: () => {\r",
									"            pm.test(\"Статус-код 500 (ошибка сервера)\", () => pm.expect(status).to.equal(500));\r",
									"            pm.test(\"Ответ содержит сообщение об ошибке\", () => {\r",
									"                pm.expect(jsonData).to.have.property(\"error\");\r",
									"            });\r",
									"        }\r",
									"    };\r",
									"\r",
									"    // Запускаем тесты для текущего кода ответа\r",
									"    if (tests[status]) tests[status]();\r",
									"} else {\r",
									"    pm.test(\"Ответ не должен быть пустым\", () => {\r",
									"        pm.expect(false, \"Сервер вернул пустой ответ\").to.be.true;\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiI1MiIsInJvbGVfaWQiOjIsImlhdCI6MTczODY1ODE3NiwiZXhwIjoxNzM5MjYyOTc2fQ.ZT4PE2VZjP7VOd5d-jRdZfyyKIjYztdal6bSKjacrxY-O410lDfKi4OssXzGeFZT",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/profile/4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"profile",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "profile user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.text()) {\r",
									"    const status = pm.response.code;\r",
									"    let jsonData;\r",
									"\r",
									"    try {\r",
									"        jsonData = pm.response.json();\r",
									"    } catch (e) {\r",
									"        pm.test(\"Ответ должен быть JSON\", () => {\r",
									"            pm.expect(false, \"Сервер вернул не JSON\").to.be.true;\r",
									"        });\r",
									"        return;\r",
									"    }\r",
									"    const tests = {\r",
									"        200: () => {\r",
									"            pm.test(\"Статус-код 200 (успешный запрос)\", () => pm.expect(status).to.equal(200));\r",
									"            pm.test(\"Ответ содержит ожидаемые данные\", () => {\r",
									"                pm.expect(jsonData).to.be.an(\"object\");\r",
									"            });\r",
									"        },\r",
									"        400: () => {\r",
									"            pm.test(\"Статус-код 400 (некорректный запрос)\", () => pm.expect(status).to.equal(400));\r",
									"            pm.test(\"Ответ содержит сообщение об ошибке\", () => {\r",
									"            });\r",
									"        },\r",
									"        401: () => {\r",
									"            pm.test(\"Статус-код 401 (неавторизован)\", () => pm.expect(status).to.equal(401));\r",
									"            pm.test(\"Ответ сообщает о необходимости авторизации\", () => {\r",
									"                pm.expect(jsonData).to.have.property(\"success\");\r",
									"            });\r",
									"        },\r",
									"        404: () => {\r",
									"            pm.test(\"Статус-код 404 (ресурс не найден)\", () => pm.expect(status).to.equal(404));\r",
									"            pm.test(\"Ответ сообщает, что ресурс отсутствует\", () => {\r",
									"                pm.expect(jsonData).to.have.property(\"success\");\r",
									"            });\r",
									"        },\r",
									"        500: () => {\r",
									"            pm.test(\"Статус-код 500 (ошибка сервера)\", () => pm.expect(status).to.equal(500));\r",
									"            pm.test(\"Ответ содержит сообщение об ошибке\", () => {\r",
									"                pm.expect(jsonData).to.have.property(\"error\");\r",
									"            });\r",
									"        }\r",
									"    };\r",
									"\r",
									"    if (tests[status]) tests[status]();\r",
									"} else {\r",
									"    pm.test(\"Ответ не должен быть пустым\", () => {\r",
									"        pm.expect(false, \"Сервер вернул пустой ответ\").to.be.true;\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiI1MiIsInJvbGVfaWQiOjIsImlhdCI6MTczODY1ODE3NiwiZXhwIjoxNzM5MjYyOTc2fQ.ZT4PE2VZjP7VOd5d-jRdZfyyKIjYztdal6bSKjacrxY-O410lDfKi4OssXzGeFZT",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"aaaa\": 52\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/profile/4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"profile",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "user by admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Заголовки содержат Content-Type: application/json\", () => {\r",
									"    if (pm.response.headers.has(\"Content-Type\")) {\r",
									"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"    }\r",
									"});\r",
									"const status = pm.response.code;\r",
									"let jsonData = {};\r",
									"const tests = {\r",
									"    200: () => {\r",
									"        pm.test(\"Статус-код 200 (успешное удаление)\", () => pm.expect(status).to.equal(200));\r",
									"        pm.test(\"Ответ содержит сообщение об удалении\", () => {\r",
									"            pm.expect(jsonData).to.be.an(\"object\");\r",
									"        });\r",
									"    },\r",
									"    400: () => {\r",
									"        pm.test(\"Статус-код 400 (неверный запрос)\", () => pm.expect(status).to.equal(400));\r",
									"        pm.test(\"Ответ содержит сообщение об ошибке\", () => {\r",
									"           pm.expect(jsonData).to.be.an(\"object\");\r",
									"        });\r",
									"    },\r",
									"    401: () => {\r",
									"        pm.test(\"Статус-код 401 (неавторизованный доступ)\", () => pm.expect(status).to.equal(401));\r",
									"        pm.test(\"Ответ сообщает о необходимости авторизации\", () => {\r",
									"            pm.expect(jsonData).to.be.an(\"object\");\r",
									"        });\r",
									"    },\r",
									"    403: () => {\r",
									"        pm.test(\"Статус-код 403 (нет прав на удаление)\", () => pm.expect(status).to.equal(403));\r",
									"        pm.test(\"Ответ сообщает о запрете действия\", () => {\r",
									"            pm.expect(jsonData).to.be.an(\"object\");\r",
									"        });\r",
									"    },\r",
									"    404: () => {\r",
									"        pm.test(\"Статус-код 404 (пользователь не найден)\", () => pm.expect(status).to.equal(404));\r",
									"        pm.test(\"Ответ сообщает об отсутствии пользователя\", () => {\r",
									"            pm.expect(jsonData).to.be.an(\"object\");\r",
									"        });\r",
									"    },\r",
									"    500: () => {\r",
									"        pm.test(\"Статус-код 500 (ошибка сервера)\", () => pm.expect(status).to.equal(500));\r",
									"        pm.test(\"Ответ содержит сообщение об ошибке\", () => {\r",
									"            pm.expect(jsonData).to.be.an(\"object\");\r",
									"        });\r",
									"    }\r",
									"};\r",
									"\r",
									"if (tests[status]) tests[status]();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiIyNSIsInJvbGVfaWQiOjEsImlhdCI6MTczODY2MzI3MSwiZXhwIjoxNzM5MjY4MDcxfQ.8otfuc9KlZvAbzij0V9YTZUmk5sjPdDH27iPfby8oFRAHBFtNsS-sJVFM7Fj5NYK",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"25\": 25\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/user/11",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"user",
								"11"
							]
						}
					},
					"response": []
				},
				{
					"name": "user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const tests = {\r",
									"    200: () => {\r",
									"        pm.test(\"Статус-код 200 (успешное удаление)\", () => pm.expect(status).to.equal(200));\r",
									"        pm.test(\"Ответ содержит сообщение об удалении\", () => {\r",
									"            pm.expect(jsonData).to.have.property(\"message\");\r",
									"            pm.expect(jsonData.message).to.include(\"успешно удален\");\r",
									"        });\r",
									"    },\r",
									"    400: () => {\r",
									"        pm.test(\"Статус-код 400 (неверный запрос)\", () => pm.expect(status).to.equal(400));\r",
									"        pm.test(\"Ответ содержит сообщение об ошибке\", () => {\r",
									"            pm.expect(jsonData).to.have.property(\"error\");\r",
									"            pm.expect(jsonData.error).to.include(\"Некорректный запрос\");\r",
									"        });\r",
									"    },\r",
									"    401: () => {\r",
									"        pm.test(\"Статус-код 401 (неавторизованный доступ)\", () => pm.expect(status).to.equal(401));\r",
									"        pm.test(\"Ответ сообщает о необходимости авторизации\", () => {\r",
									"            pm.expect(jsonData).to.have.property(\"error\");\r",
									"            pm.expect(jsonData.error).to.include(\"Необходима авторизация\");\r",
									"        });\r",
									"    },\r",
									"    403: () => {\r",
									"        pm.test(\"Статус-код 403 (нет прав на удаление)\", () => pm.expect(status).to.equal(403));\r",
									"        pm.test(\"Ответ сообщает о запрете действия\", () => {\r",
									"            pm.expect(jsonData).to.have.property(\"error\");\r",
									"            pm.expect(jsonData.error).to.include(\"Доступ запрещен\");\r",
									"        });\r",
									"    },\r",
									"    404: () => {\r",
									"        pm.test(\"Статус-код 404 (пользователь не найден)\", () => pm.expect(status).to.equal(404));\r",
									"        pm.test(\"Ответ сообщает об отсутствии пользователя\", () => {\r",
									"            pm.expect(jsonData).to.have.property(\"success\");\r",
									"            pm.expect(jsonData).to.have.property(\"message\");\r",
									"        });\r",
									"    },\r",
									"    500: () => {\r",
									"        pm.test(\"Статус-код 500 (ошибка сервера)\", () => pm.expect(status).to.equal(500));\r",
									"        pm.test(\"Ответ содержит сообщение об ошибке\", () => {\r",
									"            pm.expect(jsonData).to.have.property(\"error\");\r",
									"            pm.expect(jsonData.error).to.include(\"Ошибка сервера\");\r",
									"        });\r",
									"    }\r",
									"};\r",
									"\r",
									"// Запускаем тесты для текущего кода ответа\r",
									"if (tests[status]) tests[status]();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiIyNSIsInJvbGVfaWQiOjEsImlhdCI6MTczODY2MzAxNSwiZXhwIjoxNzM5MjY3ODE1fQ.WNQb_mh0XEcIfQfAT99yoNq5WirOPfwtjHWmn1EhQucRRsJl4Nr9sBBiXwcScPE2",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/user/52",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"user",
								"52"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "company",
			"item": [
				{
					"name": "company",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiJkaW1hIiwicm9sZV9pZCI6MSwiaWF0IjoxNzM3OTcwMzI2LCJleHAiOjE3Mzg1NzUxMjZ9.BnfB551wKKFFdiugJGbZyALRGJ_KU5lUW9WqdUX89h0ewlTvh6np5UplC7ohSHP-",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"login\": \"diis\",\r\n    \"password\": \"comp\",\r\n    \"inn\": \"32\",\r\n    \"kpp\": \"32\",\r\n    \"ogrn\": \"32\",\r\n    \"address\": \"32\",\r\n    \"director\": \"32\",\r\n    \"dateRegister\": \"2024-10-01T00:00:00.000+00:00\",\r\n    \"status\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/companies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"companies"
							]
						}
					},
					"response": []
				},
				{
					"name": "all company",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiJkaW1rYXNhbtCwYkk0QGdtYWlsLmNvbSIsInJvbGVfaWQiOjEsImlhdCI6MTczODg0MDMzMSwiZXhwIjoxNzM5NDQ1MTMxfQ.Ittc-Eom6dlOMPRUdXyBEpjek37hBz3trS3Cvrc2TI2zTyZqO_9sgZK6x773IBCj",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/company",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"company"
							]
						}
					},
					"response": []
				},
				{
					"name": "company/id",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiJkaW1rYXNhbtCwYkk0QGdtYWlsLmNvbSIsInJvbGVfaWQiOjEsImlhdCI6MTczODg0MDMzMSwiZXhwIjoxNzM5NDQ1MTMxfQ.Ittc-Eom6dlOMPRUdXyBEpjek37hBz3trS3Cvrc2TI2zTyZqO_9sgZK6x773IBCj",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/company/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"company",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "company",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiJkaW1rYXNhbtCwYkk0QGdtYWlsLmNvbSIsInJvbGVfaWQiOjEsImlhdCI6MTczODg0MDMzMSwiZXhwIjoxNzM5NDQ1MTMxfQ.Ittc-Eom6dlOMPRUdXyBEpjek37hBz3trS3Cvrc2TI2zTyZqO_9sgZK6x773IBCj",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/company/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"company",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "company\\id",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiJkaW1rYXNhbtCwYkk0QGdtYWlsLmNvbSIsInJvbGVfaWQiOjEsImlhdCI6MTczODg0MDMzMSwiZXhwIjoxNzM5NDQ1MTMxfQ.Ittc-Eom6dlOMPRUdXyBEpjek37hBz3trS3Cvrc2TI2zTyZqO_9sgZK6x773IBCj",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/company/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"company",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "test",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		},
		{
			"name": "vacancy",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiJkaW1rYXNhbtCwYkk0QGdtYWlsLmNvbSIsInJvbGVfaWQiOjEsImlhdCI6MTczODg0MDMzMSwiZXhwIjoxNzM5NDQ1MTMxfQ.Ittc-Eom6dlOMPRUdXyBEpjek37hBz3trS3Cvrc2TI2zTyZqO_9sgZK6x773IBCj",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": 52,\r\n    \"contact\": \"52@mail.ru\",\r\n    \"company_id\": 3\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8084/api/vacancy",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8084",
					"path": [
						"api",
						"vacancy"
					]
				}
			},
			"response": []
		}
	]
}